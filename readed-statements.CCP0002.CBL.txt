[1, 1]: IDENTIFICATION DIVISION.
[3, 3]: PROGRAM-ID. DDBPT6CB.
[35, 35]: ENVIRONMENT DIVISION.
[37, 37]: INPUT-OUTPUT SECTION.
[38, 38]: FILE-CONTROL.
[39, 39]:     SELECT RELAT  ASSIGN TO PRINTER-QPRINT.
[40, 40]: DATA DIVISION.
[42, 42]: FILE SECTION.
[44, 47]: FD  RELAT    RECORD CONTAINS 33 CHARACTERS    LABEL RECORDS ARE OMITTED    DATA RECORD IS REPREC.
[48, 48]: 01  REPREC          PIC  X(33).
[49, 49]: WORKING-STORAGE SECTION.
[52, 52]: 01  LINE0           PIC  X(33) VALUE  SPACES.
[53, 54]: 01  LINE1           PIC  X(33) VALUE    '***** ROP PROCESSING REPORT *****'.
[55, 55]: 01  LINE2.
[56, 56]:   05  FILLER        PIC  X(18) VALUE  '   ORDER NUMBER = '.
[57, 57]:   05  MASK0         PIC  ZZZ9.
[58, 58]:   05  FILLER        PIC  X(11) VALUE  SPACES.
[59, 60]: 01  LINE3           PIC  X(33) VALUE    '---------------------------------'.
[61, 62]: 01  LINE4           PIC  X(33) VALUE    '   LINE     PART         QTY     '.
[63, 64]: 01  LINE5           PIC  X(33) VALUE    '  NUMBER   NUMBER     REQUESTED  '.
[65, 65]: 01  LINE6.
[66, 66]:   05  FILLER        PIC  XXXX  VALUE SPACES.
[67, 67]:   05  MASK1         PIC  ZZZ9.
[68, 68]:   05  FILLER        PIC  XXXX  VALUE SPACES.
[69, 69]:   05  PART-TABLE    PIC  XXXXX.
[70, 70]:   05  FILLER        PIC  XXXX  VALUE SPACES.
[71, 71]:   05  MASK2         PIC  Z,ZZZ,ZZZ.ZZ.
[72, 72]: 01  LINE7.
[73, 74]:   05  FILLER        PIC  X(26) VALUE    'NUMBER OF LINES CREATED = '.
[75, 75]:   05  MASK3         PIC  ZZZ9.
[76, 76]:   05  FILLER        PIC  XXX   VALUE  SPACES.
[77, 78]: 01  LINE8           PIC  X(33) VALUE    '********* END OF PROGRAM ********'.
[80, 80]: 01  WHAT-TIME       PIC  X     VALUE '1'.
[81, 81]:     88  FIRST-TIME             VALUE '1'.
[82, 82]: 01  CONTL           PIC  S9999 COMP-4 VALUE ZEROS.
[83, 83]: 01  CONTD           PIC  S9999 COMP-4 VALUE ZEROS.
[84, 84]: 01  RTCODE1         PIC  S9999 COMP-4 VALUE ZEROS.
[85, 85]: 01  RTCODE2         PIC  S9999 COMP-4.
[86, 86]: 01  NEXT-NUM        PIC  S9999 COMP-4.
[87, 87]: 01  IND-NULL        PIC  S9999 COMP-4.
[88, 88]: 01  LOC-TABLE       PIC  X(16).
[89, 89]: 01  ORD-TABLE       PIC  S9999 COMP-4.
[90, 90]: 01  ORL-TABLE       PIC  S9999 COMP-4.
[91, 91]: 01  QUANT-TABLE     PIC  S9(9) COMP-4.
[92, 92]: 01  QTY-TABLE       PIC  S9(9) COMP-4.
[93, 93]: 01  ROP-TABLE       PIC  S9(9) COMP-4.
[94, 94]: 01  EOQ-TABLE       PIC  S9(9) COMP-4.
[95, 95]: 01  QTY-REQ         PIC  S9(9) COMP-4.
[96, 96]: 01  QTY-REC         PIC  S9(9) COMP-4.
[98, 98]: 01  XPARM.
[99, 99]:     05   LOC        PIC  X(4)  VALUE 'SQLA'.
[101, 101]: 01  ERROR-MESSAGE.
[102, 102]:     05   MSG-ID.
[103, 104]:     10   MSG-ID-1     PIC  X(2)         VALUE 'SQ'.
[105, 105]:     10   MSG-ID-2     PIC 99999.
[109, 109]:     EXEC SQL INCLUDE SQLCA    END-EXEC.
[111, 111]: LINKAGE SECTION.
[113, 113]: 01  LOCAL-DB        PIC  X(18).
[114, 114]: 01  REMOTE-DB       PIC  X(18).
[116, 116]: PROCEDURE DIVISION USING LOCAL-DB REMOTE-DB.
[122, 131]:     EXEC SQL DECLARE NEXT_PART CURSOR FOR         SELECT PART_NUM,                PART_QUANT,                PART_ROP,                PART_EOQ         FROM   PART_STOCK         WHERE  PART_ROP > PART_QUANT           AND  PART_NUM > :PART-TABLE         ORDER BY PART_NUM ASC    END-EXEC.
[133, 143]:     EXEC SQL DECLARE NEXT_ORDER_LINE CURSOR FOR         SELECT A.ORDER_NUM,                ORDER_LINE,                QUANT_REQ         FROM   PART_ORDLN A,                PART_ORDER B         WHERE  PART_NUM  = :PART-TABLE         AND    LINE_STAT  <> 'C'         AND    A.ORDER_NUM = B.ORDER_NUM         AND    ORDER_TYPE  = 'R'    END-EXEC.
[147, 147]:     EXEC SQL WHENEVER SQLERROR GO TO DB-ERROR END-EXEC.
[148, 148]:     EXEC SQL WHENEVER SQLWARNING CONTINUE  END-EXEC.
[150, 150]: MAIN-PROGRAM-PROC.
[152, 152]:     PERFORM START-UP THRU START-UP-EXIT.
[153, 153]:     PERFORM MAIN-PROC THRU MAIN-EXIT UNTIL RTCODE1 = 100.
[154, 154]: END-OF-PROGRAM.
[157, 157]:     EXEC SQL CONNECT RESET END-EXEC.
[159, 159]:     CLOSE RELAT.
[160, 160]:     GOBACK.
[161, 161]: MAIN-PROGRAM-EXIT. EXIT.
[164, 164]: START-UP.
[166, 166]:     OPEN OUTPUT RELAT.
[168, 168]:     EXEC SQL COMMIT END-EXEC.
[170, 170]:     PERFORM CLEAN-UP THRU CLEAN-UP-EXIT.
[175, 175]:     EXEC SQL CONNECT TO :LOCAL-DB END-EXEC.
[177, 177]: START-UP-EXIT. EXIT.
[179, 180]:     EJECTMAIN-PROC.
[182, 182]:     EXEC SQL OPEN NEXT_PART END-EXEC.
[183, 189]:     EXEC SQL         FETCH NEXT_PART         INTO  :PART-TABLE,               :QUANT-TABLE,               :ROP-TABLE,               :EOQ-TABLE    END-EXEC.
[190, 236]:     IF SQLCODE = 100       MOVE 100 TO RTCODE1       PERFORM TRAILER-PROC THRU TRAILER-EXIT    ELSE       MOVE 0 TO RTCODE2       MOVE 0 TO QTY-REQ       MOVE 0 TO QTY-REC       EXEC SQL COMMIT END-EXEC       EXEC SQL CONNECT TO :REMOTE-DB END-EXEC       EXEC SQL OPEN NEXT_ORDER_LINE END-EXEC       PERFORM UNTIL RTCODE2 = 100          EXEC SQL               FETCH NEXT_ORDER_LINE               INTO  :ORD-TABLE,                     :ORL-TABLE,                     :QTY-TABLE          END-EXEC          IF SQLCODE = 100             MOVE 100 TO RTCODE2             EXEC SQL CLOSE NEXT_ORDER_LINE END-EXEC          ELSE             ADD QTY-TABLE TO QTY-REQ             EXEC SQL                  SELECT SUM(QUANT_RECV)                  INTO   :QTY-TABLE:IND-NULL                  FROM   SHIPMENTLN                  WHERE  ORDER_LOC  = :LOC                  AND    ORDER_NUM  = :ORD-TABLE                  AND    ORDER_LINE = :ORL-TABLE             END-EXEC             IF IND-NULL NOT < 0                ADD QTY-TABLE TO QTY-REC             END-IF          END-IF       END-PERFORM       IF ROP-TABLE > QUANT-TABLE + QTY-REQ - QTY-REC          PERFORM ORDER-PROC THRU ORDER-EXIT       END-IF    END-IF.
[238, 238]:     EXEC SQL COMMIT END-EXEC.
[244, 244]:     EXEC SQL CONNECT TO :LOCAL-DB END-EXEC.
[246, 246]: MAIN-EXIT. EXIT.
[248, 248]: ORDER-PROC.
[250, 252]:     IF FIRST-TIME       MOVE '2' TO WHAT-TIME       PERFORM CREATE-ORDER-PROC THRU CREATE-ORDER-EXIT.
[253, 253]:     ADD 1 TO CONTL.
[254, 267]:     EXEC SQL         INSERT         INTO    PART_ORDLN                (ORDER_NUM,                 ORDER_LINE,                 PART_NUM,                 QUANT_REQ,                 LINE_STAT)         VALUES (:NEXT-NUM,                 :CONTL,                 :PART-TABLE,                 :EOQ-TABLE,                 'O')    END-EXEC.
[268, 268]:     PERFORM DETAIL-PROC THRU DETAIL-EXIT.
[269, 269]: ORDER-EXIT. EXIT.
[272, 272]: CREATE-ORDER-PROC.
[275, 279]:     EXEC SQL         SELECT (MAX(ORDER_NUM) + 1)         INTO   :NEXT-NUM:IND-NULL         FROM   PART_ORDER    END-EXEC.
[280, 281]:     IF IND-NULL < 0      MOVE 1 TO NEXT-NUM.
[282, 293]:     EXEC SQL         INSERT         INTO    PART_ORDER                (ORDER_NUM,                 ORIGIN_LOC,                 ORDER_TYPE,                 ORDER_STAT,                 CREAT_TIME)         VALUES (:NEXT-NUM,                 :LOC, 'R', 'O',                 CURRENT TIMESTAMP)       END-EXEC.
[294, 294]:     MOVE NEXT-NUM TO MASK0.
[295, 295]:     PERFORM HEADER-PROC THRU HEADER-EXIT.
[296, 296]: CREATE-ORDER-EXIT. EXIT.
[299, 299]: DB-ERROR.
[301, 301]:     PERFORM ERROR-MSG-PROC THRU ERROR-MSG-EXIT.
[305, 305]:     EXEC SQL WHENEVER SQLERROR CONTINUE END-EXEC.
[307, 307]:     EXEC SQL ROLLBACK WORK END-EXEC.
[309, 309]:     PERFORM END-OF-PROGRAM THRU MAIN-PROGRAM-EXIT.
[311, 311]:     EXEC SQL WHENEVER SQLERROR GO TO DB-ERROR END-EXEC.
[313, 313]: ERROR-MSG-PROC.
[315, 315]:     MOVE  SQLCODE   TO  MSG-ID-2.
[316, 316]:     DISPLAY 'SQL STATE =' SQLSTATE ' SQLCODE =' MSG-ID-2.
[318, 318]: ERROR-MSG-EXIT. EXIT.
[324, 324]: HEADER-PROC.
[326, 326]:     WRITE REPREC FROM LINE1 AFTER ADVANCING PAGE.
[327, 327]:     WRITE REPREC FROM LINE2 AFTER ADVANCING 3 LINES.
[328, 328]:     WRITE REPREC FROM LINE3 AFTER ADVANCING 2 LINES.
[329, 329]:     WRITE REPREC FROM LINE4 AFTER ADVANCING 1 LINES.
[330, 330]:     WRITE REPREC FROM LINE5 AFTER ADVANCING 1 LINES.
[331, 331]:     WRITE REPREC FROM LINE3 AFTER ADVANCING 1 LINES.
[332, 332]:     WRITE REPREC FROM LINE0 AFTER ADVANCING 1 LINES.
[333, 333]: HEADER-EXIT. EXIT.
[335, 335]: DETAIL-PROC.
[337, 337]:     ADD 1 TO CONTD.
[338, 342]:     IF CONTD > 50       MOVE 1 TO CONTD       PERFORM HEADER-PROC THRU HEADER-EXIT    END-IF    MOVE CONTL     TO MASK1.
[343, 343]:     MOVE EOQ-TABLE TO MASK2.
[344, 344]:     WRITE REPREC FROM LINE6 AFTER ADVANCING 1 LINES.
[345, 345]: DETAIL-EXIT. EXIT.
[347, 347]: TRAILER-PROC.
[349, 349]:     MOVE CONTL TO MASK3.
[350, 350]:     WRITE REPREC FROM LINE3 AFTER ADVANCING 2 LINES.
[351, 351]:     WRITE REPREC FROM LINE7 AFTER ADVANCING 2 LINES.
[352, 352]:     WRITE REPREC FROM LINE3 AFTER ADVANCING 2 LINES.
[353, 353]:     WRITE REPREC FROM LINE8 AFTER ADVANCING 1 LINES.
[354, 354]: TRAILER-EXIT. EXIT.
[360, 360]: CLEAN-UP.
[366, 366]:     EXEC SQL CONNECT TO :REMOTE-DB END-EXEC.
[369, 376]:        EXEC SQL            DELETE            FROM    PART_ORDLN            WHERE   ORDER_NUM IN                       (SELECT  ORDER_NUM                        FROM    PART_ORDER                        WHERE   ORDER_TYPE = 'R')       END-EXEC.
[377, 381]:        EXEC SQL            DELETE            FROM    PART_ORDER            WHERE   ORDER_TYPE = 'R'       END-EXEC.
[383, 383]:     EXEC SQL COMMIT END-EXEC.
[385, 385]: CLEAN-UP-EXIT. EXIT.
